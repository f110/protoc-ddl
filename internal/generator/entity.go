package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"path/filepath"
	"strings"

	"github.com/golang/protobuf/protoc-gen-go/descriptor"

	"go.f110.dev/protoc-ddl/internal/schema"
)

const GoEntityGeneratorVersion = "v0.1"

type GoEntityGenerator struct{}

var (
	GoDataTypeMap = map[string]string{
		"TYPE_FLOAT":         "float32",
		"TYPE_DOUBLE":        "float64",
		"TYPE_INT32":         "int32",
		"TYPE_INT64":         "int64",
		"TYPE_UINT32":        "uint32",
		"TYPE_UINT64":        "uint64",
		"TYPE_SINT32":        "int",
		"TYPE_SINT64":        "int64",
		"TYPE_FIXED32":       "INTEGER UNSIGNED",
		"TYPE_FIXED64":       "BIGINT UNSIGNED",
		"TYPE_SFIXED32":      "INTEGER",
		"TYPE_SFIXED64":      "BIGINT",
		"TYPE_BOOL":          "bool",
		"TYPE_BYTES":         "[]byte",
		"TYPE_STRING":        "string",
		schema.TimestampType: "time.Time",
	}
)

var importPackages = []string{"time"}

func (GoEntityGenerator) Generate(buf *bytes.Buffer, fileOpt *descriptor.FileOptions, messages *schema.Messages) {
	src := new(bytes.Buffer)

	packageName := fileOpt.GetGoPackage()
	if strings.Contains(packageName, ";") {
		s := strings.SplitN(packageName, ";", 2)
		packageName = s[1]
	} else {
		packageName = filepath.Base(packageName)
	}
	src.WriteString(fmt.Sprintf("package %s\n", packageName))
	src.WriteString("import (\n")
	for _, v := range importPackages {
		src.WriteString("\"" + v + "\"\n")
	}
	src.WriteString(")\n")
	src.WriteString("var _ = time.Time{}\n")

	messages.Each(func(m *schema.Message) {
		src.WriteString(fmt.Sprintf("type %s struct {\n", m.Descriptor.GetName()))
		m.Fields.Each(func(f *schema.Field) {
			src.WriteString(fmt.Sprintf("%s %s\n", schema.ToCamel(f.Name), GoDataTypeMap[f.Type]))
		})
		src.WriteString("}\n\n")
	})

	buf.WriteString("// Generated by protoc-ddl.\n")
	buf.WriteString(fmt.Sprintf("// protoc-gen-entity: %s\n", GoEntityGeneratorVersion))
	b, err := format.Source(src.Bytes())
	if err != nil {
		log.Print(err)
		return
	}
	buf.Write(b)
}
